{"version":3,"sources":["server/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as WebSocket from \"ws\";\r\nimport * as api from \"../shared/api\";\r\n\r\nconst server = new WebSocket.Server({ port: 8800 });\r\nserver.on(\"connection\", receiveConnection);\r\n\r\ninterface Session {\r\n\tsendChatMessage(message: api.ChatContent): void;\r\n}\r\nconst sessions: Session[] = [];\r\n\r\nconst recentMessages: api.ChatContent[] = new Array(2048);\r\nlet recentMessagesPointer = 0;\r\n\r\nfunction receiveConnection(ws: WebSocket) {\r\n    let username: string;\r\n\tlet room: string;\r\n\r\n    ws.on(\"message\", message);\r\n\tws.on(\"close\", close);\r\n\tconst session: Session = { sendChatMessage };\r\n\tsessions.push(session);\r\n\r\n    function message(data) {\r\n\t\ttry {\r\n\t\t\tconst object = <api.ClientMessage> JSON.parse(data);\r\n\t\t\tif (typeof object.kind !== \"number\") return;\r\n\t\t\tswitch (object.kind) {\r\n\t\t\t\tcase api.MessageKind.FindRooms:\r\n\t\t\t\t\tfindRooms(<api.FindRooms> object);\r\n\t\t\t\tcase api.MessageKind.OpenRoom:\r\n\t\t\t\t\topenRoom(<api.OpenRoom> object);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase api.MessageKind.SendMessage:\r\n\t\t\t\t\tchatMessage(<api.SendMessage> object);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}\r\n\tfunction close() {\r\n\t\tconst index = sessions.indexOf(session);\r\n\t\tsessions.splice(index, 1);\r\n\t}\r\n\tfunction send(data: api.ServerMessage) {\r\n\t\tws.send(JSON.stringify(data));\r\n    }\r\n    \r\n    function sendChatMessage(content: api.ChatContent) {\r\n\t\tif (content.room === room) {\r\n\t\t\tsend({\r\n\t\t\t\tkind: api.MessageKind.ReceiveMessage,\r\n\t\t\t\tcontent\r\n\t\t\t});\r\n\t\t}\r\n    }\r\n    \r\n    function chatMessage(message: api.SendMessage) {\r\n\t\tif (typeof message.content !== \"string\") return;\r\n\r\n\t\tconst content: api.ChatContent = {\r\n\t\t\troom,\r\n\t\t\tusername,\r\n\t\t\tcontent: message.content\r\n\t\t};\r\n\r\n\t\trecentMessages[recentMessagesPointer] = content;\r\n\t\trecentMessagesPointer++;\r\n\t\tif (recentMessagesPointer >= recentMessages.length) {\r\n\t\t\trecentMessagesPointer = 0;\r\n\t\t}\r\n\r\n\t\tfor (const item of sessions) {\r\n\t\t\tif (session !== item) item.sendChatMessage(content);\r\n\t\t}\r\n\t}\r\n\tfunction openRoom(message: api.OpenRoom) {\r\n\t\tif (typeof message.username !== \"string\" || typeof message.room !== \"string\") return;\r\n\t\tusername = message.username;\r\n\t\troom = message.room;\r\n\t\tfunction check(item: api.ChatContent) {\r\n\t\t\tif (!item) return false;\r\n\t\t\treturn item.room === room;\r\n\t\t}\r\n\t\tlet messages = [\r\n\t\t\t...recentMessages.slice(recentMessagesPointer).filter(check),\r\n\t\t\t...recentMessages.slice(0, recentMessagesPointer).filter(check)\r\n\t\t];\r\n\t\tsend({\r\n\t\t\tkind: api.MessageKind.RoomContent,\r\n\t\t\troom,\r\n\t\t\tmessages\r\n\t\t});\r\n\t}\r\n\tfunction findRooms(message: api.FindRooms) {\r\n\t\tconst query = message.query;\r\n\t\tif (typeof query !== \"string\") return;\r\n\r\n\t\tconst rooms = recentMessages\r\n\t\t\t.map(msg => msg.room)\r\n\t\t\t.filter(room => room.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n\t\t\t.sort();\r\n\t\tconst completions: string[] = [];\r\n\t\tlet previous: string = undefined;\r\n\t\tfor (let room of rooms) {\r\n\t\t\tif (previous !== room) {\r\n\t\t\t\tcompletions.push(room);\r\n\t\t\t\tprevious = room;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsend({\r\n\t\t\tkind: api.MessageKind.RoomCompletions,\r\n\t\t\tcompletions\r\n\t\t});\r\n\t}\r\n}"]}